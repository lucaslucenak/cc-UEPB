Notação O: Limite SUPERIOR

n > n0 ---> f(n) <= c.h(n)
Sendo n o número de execuções temos: n é maior que 0 e f(n) terá que ser menor ou igual à limitação superior que for definida

sempre serão os limites iguais ou superiores à maior constante da expressão, ex:
	f = n^2 - 1 ---> f = O(n^2)
	f = n^2 - 1 ---> f = O(n^3)
	f = n^2 - 1 ---> f = O(n^4)
	...
mas a preocupação é em encontrar o menor limite superior possível, logo seria:
	f = n^2 - 1 ---> f = O(n^2)

quando não há nenhuma variável na expressão, o tempo de execução será sempre constante, ex:
	f = 403 ---> f = O(1)
	f = 403 + 300 . 10 ---> f = O(1)

quando temos um polinômio, procuramos utilizar o termo mais custoso para pegar o limitante superior, ex:
	f = 5 + 2log(n) + 3log^2(n) ---> f = O(log^2(n))
	//f = 5 + 2log(n) + 3log^2(n) ---> f = O(n) [O(n) é maior que O(log^2(n)), mas seguindo o princípio de procurar o menor limite superior, o adotado seria O(log^2(n))]

	f = 3n + 5log(n) + 2 ---> f = O(n)
	f = 5.2^n + 5n^10 ---> f = O(2^n)

Notação Ω (Ômega): Limite INFERIOR

n > n0 ---> f(n) >= c.h(n)
Sendo n o número de execuções temos: n é maior que 0 e f(n) terá que ser maior ou igual à limitação inferior que for definida


sempre serão os limites iguais ou inferiores à maior constante da expressão, ex:
	f = n^2 - 1 ---> f = Ω(n^2)
	f = n^2 - 1 ---> f = Ω(n)
	f = n^2 - 1 ---> f = Ω(1)
	...


Notação Θ (Theta): Limitante SUPERIOR JUSTO (IGUAL)

Será o limitante superior justo, ou seja será igual à variável de maior peso, exatamente igual, ex:
	f = n^2 ---> f = Θ(n^2)
	f = n^2 - 1 ---> f = Θ(n^2)
	f = n^3 ---> f = Θ(n^3)






for (int i = 0; i < n; i++)
	operacao 1
	for (int j = 0; j < n; j++)
		operacao 2

custo = n^2























